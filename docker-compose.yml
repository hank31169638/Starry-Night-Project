version: '3.8'

services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  django:
    build: ./backend  # 假设您的 Django Dockerfile 在 ./django 目录下
    command: python manage.py runserver # production environment -> gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - redis

  celery:
    build: ./backend  # Celery 可以使用同一个 Dockerfile
    command: celery -A backend worker -l info
    volumes:
      - ./django:/app
    depends_on:
      - redis
      - django

  nextjs:
    build: ./frontend  # 假设您的 Next.js Dockerfile 在 ./nextjs 目录下
    command: npm run dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # 确保 Next.js 依赖可以被共享
    depends_on:
      - django
    environment:
      - NODE_ENV=development

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d  # 假设您的 Nginx 配置文件在 ./nginx 目录下
    depends_on:
      - django
      - nextjs
